{"version":3,"sources":["components/TogglReport/TogglReport.module.scss","components/SettingsMenu/SettingsPopup.module.scss","components/App/AuthenticatedContent/AuthenticatedContent.module.scss","models/User.ts","models/Workspace.ts","services/SettingsRepository.ts","services/toggl/BaseTogglApiService.ts","services/toggl/UsersService.ts","context/UserContext.tsx","services/locale/LocaleManager.ts","models/Report.ts","models/ReportProject.ts","models/TimeEntry.ts","services/toggl/ReportsService.ts","models/Client.ts","services/toggl/WorkspaceService.ts","utilities/BindThis.ts","utilities/styles.ts","components/ClientSelector/ClientSelector.tsx","context/SettingsContext.tsx","services/ReportProjectRoundedHoursService.ts","utilities/padLeft.ts","components/TogglReport/TogglReportProject/TogglReportProject.styles.ts","components/TogglReport/TogglReportProject/TogglReportProject.tsx","components/TogglReport/TogglReport.tsx","components/WorkspaceSelector/WorkspaceSelector.styles.ts","components/WorkspaceSelector/WorkspaceSelector.tsx","components/App/AuthenticatedContent/AuthenticatedContent.tsx","components/App/AuthenticatingContent/AuthenticatingContent.styles.ts","components/App/AuthenticatingContent/AuthenticatingContent.tsx","components/App/FooterContent/FooterContent.tsx","components/MediaQuery/MediaQuery.tsx","utilities/hasProperty.ts","components/SettingsMenu/SettingsForm.tsx","components/SettingsMenu/SettingsPopup.tsx","components/App/HeaderContent/HeaderContent.styles.ts","components/App/HeaderContent/HeaderContent.tsx","components/App/NotAuthenticatedContent/NotAuthenticatedContent.tsx","components/App/App.tsx","index.tsx","components/App/App.module.scss"],"names":["module","exports","User","email","fullName","imageUrl","defaultWorkspaceId","workspaces","firstDayOfTheWeek","Workspace","id","name","SettingsRepository","localStorage","clear","getItem","this","togglApiTokenKey","token","setItem","value","roundProjectDurationsDownToMinutesKey","parsedValue","JSON","parse","isNaN","minutes","stringify","BaseTogglApiService","urlPath","queryString","apiKey","togglApiToken","url","buildUrl","requestInit","headers","authorization","btoa","method","fetch","response","json","responseData","ok","path","BASE_URL","user_agent","USER_AGENT","qs","UsersService","userReponse","data","map","workspace","fullname","image_url","default_wid","beginning_of_week","userReducer","state","action","type","user","undefined","authState","UserContext","React","createContext","useUserState","useContext","userState","dispatchUserState","login","useCallback","getCurrentUser","then","catch","LocaleManager","firstDayOfWeek","moment","updateLocale","week","dow","doy","localeData","firstDayOfYear","Report","totalTimeInMilliseconds","projects","ReportProject","title","timeInMilliseconds","client","hexColor","timeEntries","summaryString","filter","entry","parsedGroupTitle","sort","forEach","parsedEntryTitle","timeEntriesWithGroup","timeEntryGroups","groupTitle","Object","keys","indexOf","push","timeEntry","TimeEntry","groupTimeEntriesRegex","RegExp","parsedTitle","exec","length","ReportsService","workspaceId","selectedDate","workspace_id","since","startOf","format","until","endOf","reportResponse","total_grand","timeEntryGroup","project","time","hex_color","items","time_entry","Client","at","notes","hourlyRate","currency","WorkspaceService","clientsReponse","clientResponse","wid","hrate","cur","BindThis","_","key","descriptor","TypeError","configurable","get","bound","bind","defineProperty","writable","createStyles","styles","verticalCenterStyles","position","top","transform","ellipsisText","textOverflow","whiteSpace","overflow","renderClient","Option","select","minWidth","ClientSelector","onChange","className","clients","selectedClientName","isLoading","handleOptionChange","clientName","style","placeholder","defaultActiveFirstOption","allowClear","loading","disabled","settingsReducer","reset","getInitialState","roundProjectDurationsDownToMinutes","SettingsContext","useSettings","dispatch","roundMillisecondsToMinutes","milliseconds","Math","round","duration","asMinutes","padLeft","nbr","stringLength","repeat","slice","projectTitleLineStyles","display","projectCard","marginBottom","projectTitleLine","fatProjectTitleLine","fontWeight","timeEntriesSummary","overflowWrap","renderProjectTitle","TogglReportProject","props","durationInMinutes","projectDurationInMinutes","handleCardClick","a","message","destroy","navigator","clipboard","writeText","success","error","extra","add","asHours","toFixed","hoverable","onClick","renderTogglReportTitle","roundedDurationInMinutes","hours","floor","roundedDuration","roundedHours","roundedMinutes","asMilliseconds","renderTogglReportProjects","roundedProjectDuration","reportProject","TogglReport","report","loadingSpinner","filteredProjects","p","reduce","total","roundedProjectDurations","reportProjects","roundMinutes","roundMilliseconds","roundedTimeEntries","remainderMilliseconds","projectMillisecondsWithRemainder","newRemainderMilliseconds","roundedProjectMinutes","roundReportProjectsDownToMinutes","totalRoundedDurationInMinutes","projectsGrid","renderWorkspace","WorkspaceSelector","selectedWorkspaceId","AuthenticatedContent","localStorageKeyIsOptionsToggleOpen","optionsCollapseKey","areClientsFetching","fetchReport","optionsDefaultActiveKey","shouldOptionsBeOpenOnLoad","contentContainer","defaultActiveKey","handleOptionsCollapseChanged","Panel","header","optionsPanelContainer","inputContainer","inputLabel","inputField","handleWorkspaceSelectorChanged","optionsDivider","handleClientSelectorChanged","WeekPicker","handleWeekPickerChanged","reportContainer","Array","setState","newDate","getSummaryReport","fetchWorkspace","getWorkspaceClients","result","finally","localStorageValue","left","AuthenticatingContent","align","FooterContent","MediaQuery","mediaQuery","window","matchMedia","addEventListener","handleChange","matches","removeEventListener","event","hasProperty","object","property","Form","create","onValuesChange","allFormFields","initialValues","onFormFieldChanged","changedFormItems","roundProjectMinutes","changedFields","setTimeout","areAllFieldsValid","areValid","changedField","errors","form","getFieldError","onSave","layout","onKeyDown","keyCode","preventDefault","Item","label","getFieldDecorator","initialValue","min","SettingsPopup","settings","useState","isModalOpen","setIsModalOpen","formFieldValues","setFormFieldValues","isFormValid","setIsFormValid","initialFormFieldValues","closeModal","handleSave","handleCancel","handleResetDefaults","theme","icon","footer","ghost","restoreSettingsButton","visible","destroyOnClose","maskClosable","onCancel","avatarContainer","navbarCenter","textAlign","navbarTitle","color","textTransform","padding","optionsContainer","marginTop","right","HeaderContent","isSmallWidth","userNameAndEmail","avatarSrc","avatarTooltipPlacement","handleWidthMediaQueryChanged","placement","autoAdjustOverflow","size","src","doesMediaQueryMatch","NotAuthenticatedContent","description","renderDescription","href","rel","target","App","content","useEffect","Header","Content","Footer","config","maxCount","ReactDOM","render","settingsState","reducer","useReducer","Provider","children","document","getElementById"],"mappings":"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","file":"static/js/main.727d75e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingSpinner\":\"TogglReport_loadingSpinner__39wB8\",\"projectsGrid\":\"TogglReport_projectsGrid__30rUC\",\"project\":\"TogglReport_project__3C9eX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"SettingsPopup_icon__BAA6z\",\"restoreSettingsButton\":\"SettingsPopup_restoreSettingsButton__31HQs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentContainer\":\"AuthenticatedContent_contentContainer__NnNEi\",\"reportContainer\":\"AuthenticatedContent_reportContainer__scAMV\",\"optionsPanelContainer\":\"AuthenticatedContent_optionsPanelContainer__3E8Mq\",\"optionsDivider\":\"AuthenticatedContent_optionsDivider__3BVsA\",\"inputContainer\":\"AuthenticatedContent_inputContainer__1rD7s\",\"inputLabel\":\"AuthenticatedContent_inputLabel__1y7sv\",\"inputField\":\"AuthenticatedContent_inputField__13Gbu\"};","import { FirstDayOfTheWeek } from \"../services/locale/LocaleManager\";\nimport { Workspace } from \"./Workspace\";\n\nexport class User {\n    constructor(\n        public readonly email: string,\n        public readonly fullName: string,\n        public readonly imageUrl: string,\n        public readonly defaultWorkspaceId: number,\n        public readonly workspaces: Workspace[],\n        public readonly firstDayOfTheWeek: FirstDayOfTheWeek,\n    ) {}\n}\n","export class Workspace {\n    constructor(public readonly id: number, public readonly name: string) {}\n}\n","export default class SettingsRepository {\n    public static get togglApiToken(): string {\n        return localStorage.getItem(this.togglApiTokenKey) || \"\";\n    }\n\n    public static set togglApiToken(token: string) {\n        localStorage.setItem(this.togglApiTokenKey, token);\n    }\n\n    public static get roundProjectDurationsDownToMinutes(): number {\n        const value = localStorage.getItem(this.roundProjectDurationsDownToMinutesKey);\n        if (value === null) {\n            return 0;\n        }\n        const parsedValue = JSON.parse(value);\n        return isNaN(parsedValue) ? 0 : parsedValue;\n    }\n\n    public static set roundProjectDurationsDownToMinutes(minutes: number) {\n        localStorage.setItem(this.roundProjectDurationsDownToMinutesKey, JSON.stringify(minutes));\n    }\n\n    private static roundProjectDurationsDownToMinutesKey = \"TogglEasyReports_Settings_RoundProjectDurationsDownToMinutes\";\n    private static togglApiTokenKey = \"TogglEasyReports_Settings_TogglApiToken\";\n\n    public static reset(): void {\n        localStorage.clear();\n    }\n}\n","import qs from \"qs\";\nimport SettingsRepository from \"../SettingsRepository\";\n\ninterface IQueryString {\n    [key: string]: string;\n}\n\nexport default abstract class BaseTogglApiService {\n    private static BASE_URL: string = \"https://track.toggl.com\";\n    private static USER_AGENT: string = \"https://github.com/BenjaVR/toggl-easy-report\";\n\n    protected static async fetch<TResponse>(urlPath: string, queryString: IQueryString = {}): Promise<TResponse> {\n        const apiKey = SettingsRepository.togglApiToken;\n        const url = this.buildUrl(urlPath, queryString);\n        const requestInit: RequestInit = {\n            headers: {\n                authorization: `Basic ${btoa(`${apiKey}:api_token`)}`,\n            },\n            method: \"GET\",\n        };\n\n        // TODO: try/catch for network errors?\n        const response = await fetch(url, requestInit);\n        const responseData = await response.json();\n        if (response.ok) {\n            return responseData as TResponse;\n        } else {\n            // TODO: handle non-200 responses?\n            throw responseData;\n        }\n    }\n\n    private static buildUrl(path: string, queryString: IQueryString): string {\n        if (process.env.NODE_ENV === \"production\") {\n            path = `${this.BASE_URL}${path}`;\n        }\n\n        if (!(\"user_agent\" in queryString)) {\n            queryString.user_agent = this.USER_AGENT;\n        }\n\n        return `${path}?${qs.stringify(queryString)}`;\n    }\n}\n","import { User } from \"../../models/User\";\nimport { Workspace } from \"../../models/Workspace\";\nimport { FirstDayOfTheWeek } from \"../locale/LocaleManager\";\nimport BaseTogglApiService from \"./BaseTogglApiService\";\n\ninterface IUserResponse {\n    data: IUser;\n}\n\ninterface IUser {\n    email: string;\n    fullname: string;\n    image_url: string;\n    workspaces: IWorkspace[];\n    default_wid: number;\n    beginning_of_week: number;\n}\n\ninterface IWorkspace {\n    readonly id: number;\n    readonly name: string;\n}\n\nexport default class UsersService extends BaseTogglApiService {\n    public static async getCurrentUser(): Promise<User> {\n        const userReponse = await this.fetch<IUserResponse>(\"/api/v8/me\");\n        const { data } = userReponse;\n        const workspaces = data.workspaces.map((workspace) => {\n            return new Workspace(workspace.id, workspace.name);\n        });\n        return new User(\n            data.email,\n            data.fullname,\n            data.image_url,\n            data.default_wid,\n            workspaces,\n            data.beginning_of_week as FirstDayOfTheWeek,\n        );\n    }\n}\n","import React, { Dispatch, ReducerAction, ReducerState, useCallback, useContext, useReducer } from \"react\";\nimport { User } from \"../models/User\";\nimport UsersService from \"../services/toggl/UsersService\";\n\ntype UserState =\n    | { authState: \"LOGGED_IN\", user: User }\n    | { authState: \"LOGGED_OUT\" | \"LOGGING_IN\" | \"LOGIN_FAILED\", user: undefined };\n\ntype UserAction =\n    | { type: \"LOGGING_IN\" }\n    | { type: \"LOGGED_IN\", user: User }\n    | { type: \"LOGGING_IN_FAILED\" }\n    | { type: \"LOGGED_OUT\" };\n\nfunction userReducer(state: UserState, action: UserAction): UserState {\n    switch (action.type) {\n        case \"LOGGING_IN\":\n            return {\n                user: undefined,\n                authState: \"LOGGING_IN\",\n            };\n        case \"LOGGED_IN\":\n            return {\n                user: action.user,\n                authState: \"LOGGED_IN\",\n            };\n        case \"LOGGING_IN_FAILED\":\n            return {\n                user: undefined,\n                authState: \"LOGIN_FAILED\",\n            };\n        case \"LOGGED_OUT\":\n            return {\n                user: undefined,\n                authState: \"LOGGED_OUT\",\n            };\n        default:\n            return state;\n    }\n}\n\nfunction getInitialState(): UserState {\n    return {\n        user: undefined,\n        authState: \"LOGGED_OUT\",\n    };\n}\n\n// TODO: make this cleaner?\ntype UserContextType = [ReducerState<typeof userReducer>, Dispatch<ReducerAction<typeof userReducer>>];\nconst UserContext = React.createContext<UserContextType>([\n    getInitialState(),\n    () => { return; },\n]);\n\nexport const UserProvider: React.FC = (props) => {\n    const reducer = useReducer(userReducer, getInitialState());\n\n    return (\n        <UserContext.Provider value={reducer}>\n            {props.children}\n        </UserContext.Provider>\n    );\n};\n\nexport function useUserState() {\n    const [userState, dispatchUserState] = useContext(UserContext);\n\n    const login = useCallback(() => {\n        dispatchUserState({\n            type: \"LOGGING_IN\",\n        });\n        UsersService.getCurrentUser()\n            .then((user: User) => {\n                dispatchUserState({\n                    type: \"LOGGED_IN\",\n                    user,\n                });\n            })\n            .catch(() => {\n                dispatchUserState({\n                    type: \"LOGGING_IN_FAILED\",\n                });\n            });\n    }, [dispatchUserState]);\n\n    return {\n        userState,\n        login,\n    };\n}\n","import moment from \"moment\";\n\n/**\n * 0 is sunday.\n * 1 is monday.\n */\nexport type FirstDayOfTheWeek = 0 | 1;\n\nexport class LocaleManager {\n    /**\n     * Sets the moment.js locale, also used by Ant Design.\n     * @param firstDayOfWeek - 0 is sunday, 1 is monday.\n     */\n    public static updateLocale(firstDayOfWeek: FirstDayOfTheWeek): void {\n        moment.updateLocale(\"en\", {\n            week: {\n                dow: firstDayOfWeek,\n                doy: moment.localeData().firstDayOfYear(),\n            },\n        });\n    }\n}\n","import { ReportProject } from \"./ReportProject\";\n\nexport class Report {\n    constructor(public readonly totalTimeInMilliseconds: number, public readonly projects: ReportProject[]) {}\n}\n","import { TimeEntry } from \"./TimeEntry\";\n\nexport class ReportProject {\n    constructor(\n        public readonly id: number,\n        public readonly title: string,\n        public readonly timeInMilliseconds: number,\n        public readonly client: string,\n        public readonly hexColor: string,\n        public readonly timeEntries: TimeEntry[],\n    ) {}\n\n    public get timeEntriesSummary(): string {\n        let summaryString = \"\";\n\n        const timeEntriesWithoutGroup = this.timeEntries\n            .filter((entry) => entry.parsedGroupTitle === undefined)\n            .sort();\n        timeEntriesWithoutGroup.forEach((entry) => {\n            if (summaryString !== \"\") {\n                summaryString += \"\\n\";\n            }\n            summaryString += `- ${entry.parsedEntryTitle}`;\n        });\n\n        const timeEntriesWithGroup = this.timeEntries\n            .filter((entry) => entry.parsedGroupTitle !== undefined);\n        const timeEntryGroups: { [groupTitle: string]: TimeEntry[] } = {};\n        timeEntriesWithGroup.forEach((entry) => {\n            const groupTitle = entry.parsedGroupTitle!;\n            const doesGroupForEntryAlreadyExist =\n                Object.keys(timeEntryGroups).indexOf(groupTitle) !== -1;\n            if (doesGroupForEntryAlreadyExist) {\n                timeEntryGroups[groupTitle].push(entry);\n            } else {\n                timeEntryGroups[groupTitle] = [entry];\n            }\n        });\n\n        Object.keys(timeEntryGroups).forEach((groupTitle) => {\n            if (summaryString !== \"\") {\n                summaryString += \"\\n\\n\";\n            }\n            summaryString += groupTitle;\n            timeEntryGroups[groupTitle].forEach((timeEntry) => {\n                summaryString += `\\n - ${timeEntry.parsedEntryTitle}`;\n            });\n        });\n\n        return summaryString;\n    }\n}\n","export class TimeEntry {\n    public readonly parsedGroupTitle: string | undefined;\n    public readonly parsedEntryTitle: string;\n\n    private readonly groupTimeEntriesRegex = new RegExp(\"\\\\[(.+)] - (.+)\"); // TODO: setting/parameter?\n\n    constructor(public readonly title: string, public readonly timeInMilliseconds: number) {\n        const parsedTitle = this.groupTimeEntriesRegex.exec(this.title);\n        if (parsedTitle && parsedTitle.length === 3) {\n            // The task has a group [1] and title [2]. [0] is the input string.\n            this.parsedGroupTitle = parsedTitle[1];\n            this.parsedEntryTitle = parsedTitle[2];\n        } else {\n            this.parsedGroupTitle = undefined;\n            this.parsedEntryTitle = this.title;\n        }\n    }\n}\n","import * as moment from \"moment\";\nimport { Report } from \"../../models/Report\";\nimport { ReportProject } from \"../../models/ReportProject\";\nimport { TimeEntry } from \"../../models/TimeEntry\";\nimport BaseTogglApiService from \"./BaseTogglApiService\";\n\ninterface IReportResponse {\n    total_grand: number;\n    data: ITimeEntryGroup[];\n}\n\ninterface ITimeEntryGroup {\n    id: number;\n    time: number;\n    title: ITimeEntryGroupTitle;\n    items: ITimeEntry[];\n}\n\ninterface ITimeEntryGroupTitle {\n    project: string;\n    client: string;\n    hex_color: string;\n}\n\ninterface ITimeEntry {\n    title: ITimeEntryTitle;\n    time: number;\n}\n\ninterface ITimeEntryTitle {\n    time_entry: string;\n}\n\nexport class ReportsService extends BaseTogglApiService {\n    /**\n     * Fetches a summary report, which is a weekly Toggl report.\n     * @param workspaceId\n     * @param selectedDate - The week where this date is in will be used.\n     */\n    public static async getSummaryReport(workspaceId: number, selectedDate: moment.Moment): Promise<Report> {\n        const reportResponse = await this.fetch<IReportResponse>(\"/reports/api/v2/summary\", {\n            workspace_id: `${workspaceId}`,\n            since: selectedDate.startOf(\"week\").format(\"YYYY-MM-DD\"),\n            until: selectedDate.endOf(\"week\").format(\"YYYY-MM-DD\"),\n        });\n        return new Report(\n            reportResponse.total_grand,\n            reportResponse.data.map((timeEntryGroup: ITimeEntryGroup) => {\n                return new ReportProject(\n                    timeEntryGroup.id,\n                    timeEntryGroup.title.project,\n                    timeEntryGroup.time,\n                    timeEntryGroup.title.client,\n                    timeEntryGroup.title.hex_color,\n                    timeEntryGroup.items.map((timeEntry: ITimeEntry) => {\n                        return new TimeEntry(timeEntry.title.time_entry, timeEntry.time);\n                    }),\n                );\n            }),\n        );\n    }\n}\n","export class Client {\n    constructor(\n        public readonly id: number,\n        public readonly workspaceId: number,\n        public readonly name: string,\n        public readonly at: string,\n        public readonly notes: string,\n        public readonly hourlyRate: number,\n        public readonly currency: string,\n    ) {}\n}\n","import { Client } from \"../../models/Client\";\nimport BaseTogglApiService from \"./BaseTogglApiService\";\n\ninterface IClient {\n    readonly id: number;\n    readonly wid: number;\n    readonly name: string;\n    readonly at: string;\n    readonly notes: string;\n    readonly hrate: number;\n    readonly cur: string;\n}\n\ntype WorkspaceClientsResponse = IClient[];\n\nexport default class WorkspaceService extends BaseTogglApiService {\n    public static async getWorkspaceClients(workspaceId: number): Promise<Client[]> {\n        const clientsReponse = await this.fetch<WorkspaceClientsResponse>(`/api/v8/workspaces/${workspaceId}/clients`);\n        return clientsReponse.map((clientResponse) => {\n            return new Client(\n                clientResponse.id,\n                clientResponse.wid,\n                clientResponse.name,\n                clientResponse.at,\n                clientResponse.notes,\n                clientResponse.hrate,\n                clientResponse.cur,\n            );\n        });\n    }\n}\n","import React from \"react\";\n\n/**\n * Decorator utility to bind \"this\" to methods in React components, without polluting the constructor.\n */\nexport function BindThis(): (target: React.Component, key: string, descriptor: PropertyDescriptor) => {} {\n    return (_: React.Component, key: string, descriptor: PropertyDescriptor): PropertyDescriptor => {\n        if (!descriptor || typeof descriptor.value !== \"function\") {\n            throw new TypeError(`Can only bind this on methods! ${key} is not a method.`);\n        }\n\n        return {\n            configurable: true,\n            get(this) {\n                const bound = descriptor.value!.bind(this);\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    value: bound,\n                    writable: true,\n                });\n                return bound;\n            },\n        };\n    };\n}\n","import React, { CSSProperties } from \"react\";\n\nexport type Style<T> = { [K in keyof T]: CSSProperties };\nexport function createStyles<T>(styles: Style<T>): Style<T> {\n    return styles;\n}\n\nexport const verticalCenterStyles: React.CSSProperties = {\n    position: \"absolute\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n};\n\nexport const ellipsisText: React.CSSProperties = {\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    overflow: \"hidden\",\n};\n","import { Select } from \"antd\";\nimport React, { FC, useCallback } from \"react\";\nimport { Client } from \"../../models/Client\";\nimport { createStyles } from \"../../utilities/styles\";\n\ninterface IClientSelectorProps {\n    readonly onChange: (newClientId: string | undefined) => void;\n    readonly selectedClientName: string | undefined;\n    readonly clients: Client[];\n    readonly className?: string;\n    readonly isLoading: boolean;\n}\n\nconst ClientSelector: FC<IClientSelectorProps> = ({\n    onChange,\n    className,\n    clients,\n    selectedClientName,\n    isLoading,\n}) => {\n    const handleOptionChange = useCallback((clientName: string | undefined) => {\n        if (onChange) {\n            onChange(clientName);\n        }\n    }, [onChange]);\n\n    return (\n        <Select\n            className={className}\n            style={styles.select}\n            placeholder=\"Select a workspace client (optional)\"\n            defaultActiveFirstOption={false}\n            value={selectedClientName}\n            onChange={handleOptionChange}\n            allowClear={true}\n            loading={isLoading}\n            disabled={isLoading}\n        >\n            {clients.map(renderClient)}\n        </Select>\n    );\n};\n\nfunction renderClient(client: Client): React.ReactNode {\n    return (\n        <Select.Option value={client.name} key={client.name}>\n            {client.name}\n        </Select.Option>\n    );\n}\n\nconst styles = createStyles({\n    select: {\n        minWidth: 180,\n    },\n});\n\nexport default ClientSelector;\n","import React, { Dispatch, ReducerAction, ReducerState, useContext, useReducer, useState } from \"react\";\nimport SettingsRepository from \"../services/SettingsRepository\";\n\ninterface ISettingsState {\n    readonly togglApiToken: string;\n    readonly roundProjectDurationsDownToMinutes: number;\n}\n\ntype SettingsAction =\n    | { type: \"RESET\" }\n    | { type: \"SET_TOGGL_API_TOKEN\"; token: string }\n    | { type: \"SET_ROUND_PROJECT_DURATIONS_DOWN_TO_MINUTES\"; minutes: number };\n\nfunction settingsReducer(state: ISettingsState, action: SettingsAction): ISettingsState {\n    switch (action.type) {\n        case \"RESET\":\n            SettingsRepository.reset();\n            return getInitialState();\n        case \"SET_TOGGL_API_TOKEN\":\n            SettingsRepository.togglApiToken = action.token;\n            return { ...state, togglApiToken: action.token };\n        case \"SET_ROUND_PROJECT_DURATIONS_DOWN_TO_MINUTES\":\n            SettingsRepository.roundProjectDurationsDownToMinutes = action.minutes;\n            return { ...state, roundProjectDurationsDownToMinutes: action.minutes };\n        default:\n            return state;\n    }\n}\n\nfunction getInitialState(): ISettingsState {\n    return {\n        togglApiToken: SettingsRepository.togglApiToken,\n        roundProjectDurationsDownToMinutes: SettingsRepository.roundProjectDurationsDownToMinutes,\n    };\n}\n\n// TODO: make this cleaner?\ntype SettingsContextType = [ReducerState<typeof settingsReducer>, Dispatch<ReducerAction<typeof settingsReducer>>];\nconst SettingsContext = React.createContext<SettingsContextType>([\n    getInitialState(),\n    () => { return; },\n]);\n\nexport const SettingsProvider: React.FC = (props) => {\n    const [settingsState] = useState(getInitialState());\n    const reducer = useReducer(settingsReducer, settingsState);\n\n    return (\n        <SettingsContext.Provider value={reducer}>\n            {props.children}\n        </SettingsContext.Provider>\n    );\n};\n\nexport function useSettings() {\n    const [settings, dispatchSettings] = useContext(SettingsContext);\n\n    return {\n        ...settings,\n        dispatch: dispatchSettings,\n    };\n}\n","import moment from \"moment\";\nimport { ReportProject } from \"../models/ReportProject\";\n\nexport interface IRoundedProjectDuration {\n    readonly reportProject: ReportProject;\n    readonly roundedMinutes: number;\n}\n\nexport function roundReportProjectsDownToMinutes(\n    reportProjects: ReportProject[],\n    roundMinutes: number,\n): IRoundedProjectDuration[] {\n\n    if (roundMinutes === 0) {\n        return reportProjects.map((project) => {\n            return {\n                reportProject: project,\n                roundedMinutes: roundMillisecondsToMinutes(project.timeInMilliseconds),\n            };\n        });\n    }\n\n    const roundMilliseconds = roundMinutes * 1000 * 60;\n    const roundedTimeEntries: IRoundedProjectDuration[] = [];\n    let remainderMilliseconds: number = 0;\n\n    reportProjects.forEach((reportProject) => {\n        const projectMillisecondsWithRemainder = reportProject.timeInMilliseconds + remainderMilliseconds;\n        const newRemainderMilliseconds = projectMillisecondsWithRemainder % roundMilliseconds;\n        const roundedProjectMinutes = roundMillisecondsToMinutes(\n            projectMillisecondsWithRemainder - newRemainderMilliseconds,\n        );\n        roundedTimeEntries.push({\n            reportProject,\n            roundedMinutes: roundedProjectMinutes,\n        });\n        remainderMilliseconds = newRemainderMilliseconds;\n    });\n\n    return roundedTimeEntries;\n}\n\nfunction roundMillisecondsToMinutes(milliseconds: number) {\n    return Math.round(moment.duration(milliseconds).asMinutes());\n}\n","export function padLeft(nbr: number, stringLength: number): string {\n    const zeros = \"0\".repeat(stringLength);\n    return (zeros + nbr).slice(-stringLength);\n}\n","import { CSSProperties } from \"react\";\nimport { createStyles, ellipsisText } from \"../../../utilities/styles\";\n\nconst cardMargin = 4;\n\nconst projectTitleLineStyles: CSSProperties = {\n    ...ellipsisText,\n    display: \"block\",\n};\n\nexport const styles = createStyles({\n    projectCard: {\n        marginBottom: cardMargin,\n    },\n    projectTitleLine: {\n        ...projectTitleLineStyles,\n    },\n    fatProjectTitleLine: {\n        ...projectTitleLineStyles,\n        fontWeight: \"bold\",\n    },\n    timeEntriesSummary: {\n        whiteSpace: \"pre-wrap\",\n        overflowWrap: \"break-word\",\n    },\n});\n","import { Card, message } from \"antd\";\nimport moment from \"moment\";\nimport * as React from \"react\";\nimport { ReportProject } from \"../../../models/ReportProject\";\nimport { styles } from \"./TogglReportProject.styles\";\n\ninterface ITogglReportProjectProps {\n    readonly project: ReportProject;\n    readonly projectDurationInMinutes: number;\n}\n\nconst TogglReportProject: React.FC<ITogglReportProjectProps> = (props) => {\n    const { project, projectDurationInMinutes } = props;\n\n    const handleCardClick = React.useCallback(\n        async () => {\n            message.destroy();\n            try {\n                await navigator.clipboard.writeText(project.timeEntriesSummary);\n                message.success(\"Task content is copied to the clipboard!\");\n            } catch (error) {\n                message.error(`Could not copy task content to the clipboard: ${error}`);\n            }\n        },\n        [project.timeEntriesSummary],\n    );\n\n    return (\n        <Card\n            style={styles.projectCard}\n            type=\"inner\"\n            title={renderProjectTitle(project)}\n            extra={renderProjectDescription(projectDurationInMinutes)}\n            hoverable={true}\n            onClick={handleCardClick}\n        >\n            <span style={styles.timeEntriesSummary}>\n                {project.timeEntriesSummary}\n            </span>\n        </Card>\n    );\n};\n\nfunction renderProjectTitle(project: ReportProject): React.ReactNode {\n    return (\n        <div>\n            <span style={styles.fatProjectTitleLine}>{project.title}</span>\n            <span style={styles.projectTitleLine}>{project.client}</span>\n        </div>\n    );\n}\n\nfunction renderProjectDescription(durationInMinutes: number): React.ReactNode {\n    return (\n        <span>\n            <b>{moment.duration().add(durationInMinutes, \"minutes\").asHours().toFixed(2)}</b> hours\n        </span>\n    );\n}\n\nexport default TogglReportProject;\n","import { Card, Spin } from \"antd\";\nimport moment from \"moment\";\nimport * as React from \"react\";\nimport { useSettings } from \"../../context/SettingsContext\";\nimport { Report } from \"../../models/Report\";\nimport {\n    IRoundedProjectDuration,\n    roundReportProjectsDownToMinutes,\n} from \"../../services/ReportProjectRoundedHoursService\";\nimport { padLeft } from \"../../utilities/padLeft\";\nimport styles from \"./TogglReport.module.scss\";\nimport { TogglReportProject } from \"./TogglReportProject\";\n\ninterface ITogglReportProps {\n    readonly report: Report | undefined;\n    /**\n     * Optional client name to filter results.\n     */\n    readonly clientName: string | undefined;\n}\n\nconst TogglReport: React.FC<ITogglReportProps> = (props) => {\n    const { report, clientName } = props;\n    const { roundProjectDurationsDownToMinutes } = useSettings();\n\n    if (report === undefined) {\n        return (\n            <Card title=\"Loading report...\">\n                <Spin className={styles.loadingSpinner} />\n            </Card>\n        );\n    }\n\n    // Filter by client if a client is given\n    const filteredProjects = clientName === undefined\n        ? report.projects\n        : report.projects.filter((p) => p.client === clientName);\n    const totalTimeInMilliseconds = filteredProjects.reduce((total, project) => total + project.timeInMilliseconds, 0);\n\n    const roundedProjectDurations = roundReportProjectsDownToMinutes(\n        filteredProjects,\n        roundProjectDurationsDownToMinutes,\n    );\n    const totalRoundedDurationInMinutes = roundedProjectDurations.reduce((total, duration) => {\n        return total + duration.roundedMinutes;\n    }, 0);\n\n    return (\n        <Card\n            title={renderTogglReportTitle(totalTimeInMilliseconds, totalRoundedDurationInMinutes)}\n            className={styles.projectsGrid}\n        >\n            {roundedProjectDurations.map(renderTogglReportProjects)}\n        </Card>\n    );\n};\n\nfunction renderTogglReportTitle(totalTimeInMilliseconds: number, roundedDurationInMinutes: number): React.ReactNode {\n    const duration = moment.duration(totalTimeInMilliseconds, \"milliseconds\");\n    const hours = Math.floor(duration.asHours());\n    const minutes = Math.floor(duration.asMinutes()) - hours * 60;\n\n    const roundedDuration = moment.duration(roundedDurationInMinutes, \"minutes\");\n    const roundedHours = Math.floor(roundedDuration.asHours());\n    const roundedMinutes = Math.floor(roundedDuration.asMinutes()) - hours * 60;\n\n    return (\n        <span>\n            Total time: <b>{padLeft(hours, 2)}</b>h<b>{padLeft(minutes, 2)}</b>\n            {/*Only show the extra rounded info if rounded does not equal original:*/}\n            {duration.asMilliseconds() !== roundedDuration.asMilliseconds() && (\n                <>\n                    &nbsp;\n                    <i>\n                        <small>\n                            (rounded: {padLeft(roundedHours, 2)}h{padLeft(roundedMinutes, 2)})\n                        </small>\n                    </i>\n                </>\n            )}\n        </span>\n    );\n}\n\nfunction renderTogglReportProjects(roundedProjectDuration: IRoundedProjectDuration): React.ReactNode {\n    return (\n        <div key={roundedProjectDuration.reportProject.id} className={styles.project}>\n            <TogglReportProject\n                project={roundedProjectDuration.reportProject}\n                projectDurationInMinutes={roundedProjectDuration.roundedMinutes}\n            />\n        </div>\n    );\n}\n\nexport default TogglReport;\n","import { createStyles } from \"../../utilities/styles\";\n\nexport const styles = createStyles({\n    select: {\n        minWidth: 180,\n    },\n});\n","import { Select } from \"antd\";\nimport * as React from \"react\";\nimport { useCallback } from \"react\";\nimport { Workspace } from \"../../models/Workspace\";\nimport { styles } from \"./WorkspaceSelector.styles\";\n\ninterface IWorkspaceSelectorProps {\n    readonly onChange: (newWorkspaceId: number | undefined) => void;\n    readonly selectedWorkspaceId: number | undefined;\n    readonly workspaces: Workspace[];\n    readonly className?: string;\n}\n\nconst WorkspaceSelector: React.FC<IWorkspaceSelectorProps> = ({\n    onChange,\n    className,\n    workspaces,\n    selectedWorkspaceId,\n}) => {\n    const handleOptionChange = useCallback((workspaceId: number | undefined) => {\n        if (onChange) {\n            onChange(workspaceId);\n        }\n    }, [onChange]);\n\n    return (\n        <Select\n            className={className}\n            style={styles.select}\n            placeholder=\"Select a Toggl workspace\"\n            defaultActiveFirstOption={false}\n            value={selectedWorkspaceId}\n            onChange={handleOptionChange}\n        >\n            {workspaces.map(renderWorkspace)}\n        </Select>\n    );\n};\n\nfunction renderWorkspace(workspace: Workspace): React.ReactNode {\n    return (\n        <Select.Option value={workspace.id} key={workspace.id}>\n            {workspace.name}\n        </Select.Option>\n    );\n}\n\nexport default WorkspaceSelector;\n","import { Collapse, DatePicker, Divider, message } from \"antd\";\nimport moment from \"moment\";\nimport * as React from \"react\";\nimport { Client } from \"../../../models/Client\";\nimport { Report } from \"../../../models/Report\";\nimport { User } from \"../../../models/User\";\nimport { LocaleManager } from \"../../../services/locale/LocaleManager\";\nimport { ReportsService } from \"../../../services/toggl/ReportsService\";\nimport WorkspaceService from \"../../../services/toggl/WorkspaceService\";\nimport { BindThis } from \"../../../utilities/BindThis\";\nimport { ClientSelector } from \"../../ClientSelector\";\nimport { TogglReport } from \"../../TogglReport\";\nimport { WorkspaceSelector } from \"../../WorkspaceSelector\";\nimport styles from \"./AuthenticatedContent.module.scss\";\n\ninterface IAuthenticatedContentProps {\n    readonly user: User;\n}\n\ntype AuthenticatedContentProps = IAuthenticatedContentProps;\n\ninterface IAuthenticatedContentState {\n    readonly selectedWorkspaceId: number;\n    readonly clients: Client[];\n    /**\n     * When null, all clients will be used.\n     */\n    readonly selectedClientName: string | undefined;\n    readonly selectedDate: moment.Moment | undefined;\n    readonly report: Report | undefined;\n    readonly areClientsFetching: boolean;\n}\n\nclass AuthenticatedContent extends React.Component<AuthenticatedContentProps, IAuthenticatedContentState> {\n    private readonly localStorageKeyIsOptionsToggleOpen = \"OPTION_IS_OPTIONS_TOGGLE_OPEN\";\n    private readonly optionsCollapseKey = \"OPTIONS_COLLAPSE_KEY\";\n\n    constructor(props: AuthenticatedContentProps) {\n        super(props);\n\n        // Should be set before the creation of the moment object in this.state.selectedDate.\n        LocaleManager.updateLocale(props.user.firstDayOfTheWeek);\n\n        this.state = {\n            selectedWorkspaceId: props.user.defaultWorkspaceId,\n            clients: [],\n            selectedClientName: undefined,\n            selectedDate: moment(),\n            report: undefined,\n            areClientsFetching: true,\n        };\n    }\n\n    public componentDidMount(): void {\n        this.fetchReport();\n    }\n\n    public render(): React.ReactNode {\n        const {\n            selectedWorkspaceId,\n            selectedDate,\n            report,\n            clients,\n            selectedClientName,\n            areClientsFetching,\n        } = this.state;\n        const { workspaces } = this.props.user;\n\n        const optionsDefaultActiveKey = this.shouldOptionsBeOpenOnLoad()\n            ? this.optionsCollapseKey\n            : undefined;\n\n        return (\n            <div className={styles.contentContainer}>\n                <Collapse defaultActiveKey={optionsDefaultActiveKey} onChange={this.handleOptionsCollapseChanged}>\n                    <Collapse.Panel header=\"Options\" key={this.optionsCollapseKey}>\n                        <div className={styles.optionsPanelContainer}>\n                            <div className={styles.inputContainer}>\n                                <span className={styles.inputLabel}>Workspace:</span>\n                                <WorkspaceSelector\n                                    className={styles.inputField}\n                                    workspaces={workspaces}\n                                    selectedWorkspaceId={selectedWorkspaceId}\n                                    onChange={this.handleWorkspaceSelectorChanged}\n                                />\n                                <Divider className={styles.optionsDivider} type=\"vertical\" />\n                                <span className={styles.inputLabel}>Workspace:</span>\n                                <ClientSelector\n                                    className={styles.inputField}\n                                    clients={clients}\n                                    selectedClientName={selectedClientName}\n                                    onChange={this.handleClientSelectorChanged}\n                                    isLoading={areClientsFetching}\n                                />\n                            </div>\n                            <Divider className={styles.optionsDivider} type=\"vertical\" />\n                            <div className={styles.inputContainer}>\n                                <span className={styles.inputLabel}>Week:</span>\n                                <DatePicker.WeekPicker\n                                    className={styles.inputField}\n                                    value={selectedDate}\n                                    onChange={this.handleWeekPickerChanged}\n                                    allowClear={false}\n                                />\n                            </div>\n                        </div>\n                    </Collapse.Panel>\n                </Collapse>\n                <div className={styles.reportContainer}>\n                    <TogglReport report={report} clientName={selectedClientName} />\n                </div>\n            </div>\n        );\n    }\n\n    @BindThis()\n    private handleOptionsCollapseChanged(key: string | string[]): void {\n        if (key instanceof Array && key.length > 0) {\n            key = key[0];\n        }\n        localStorage.setItem(this.localStorageKeyIsOptionsToggleOpen, JSON.stringify(key === this.optionsCollapseKey));\n    }\n\n    @BindThis()\n    private handleWorkspaceSelectorChanged(workspaceId: number | undefined): void {\n        if (workspaceId === undefined) {\n            return;\n        }\n        this.setState({ selectedWorkspaceId: workspaceId }, () => this.fetchReport());\n    }\n\n    @BindThis()\n    private handleClientSelectorChanged(clientName: string | undefined): void {\n        this.setState({ selectedClientName: clientName });\n    }\n\n    @BindThis()\n    private handleWeekPickerChanged(newDate: moment.Moment | null): void {\n        this.setState(\n            {\n                selectedDate: newDate ? newDate : undefined,\n            },\n            () => this.fetchReport(),\n        );\n    }\n\n    private fetchReport(): void {\n        const { selectedDate, selectedWorkspaceId } = this.state;\n\n        if (selectedWorkspaceId === undefined) {\n            return;\n        }\n\n        this.setState({ report: undefined });\n        if (selectedDate !== undefined) {\n            ReportsService.getSummaryReport(selectedWorkspaceId, selectedDate)\n                .then((report) => {\n                    this.setState({ report }, () => this.fetchWorkspace());\n                })\n                .catch(() => {\n                    message.error(\"Could not fetch the Toggl report.\");\n                });\n        }\n    }\n\n    private fetchWorkspace(): void {\n        this.setState({ areClientsFetching: true });\n        WorkspaceService.getWorkspaceClients(this.state.selectedWorkspaceId)\n            .then((result) => {\n                this.setState({\n                    clients: result,\n                    selectedClientName: undefined,\n                });\n            })\n            .finally(() => {\n                this.setState({ areClientsFetching: false });\n            });\n    }\n\n    private shouldOptionsBeOpenOnLoad(): boolean {\n        const localStorageValue = localStorage.getItem(this.localStorageKeyIsOptionsToggleOpen);\n        return localStorageValue === null || JSON.parse(localStorageValue) === true;\n    }\n}\n\nexport default AuthenticatedContent;\n","import { createStyles, verticalCenterStyles } from \"../../../utilities/styles\";\n\nexport const styles = createStyles({\n    loadingSpinner: {\n        ...verticalCenterStyles,\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n    },\n});\n","import { Row, Spin } from \"antd\";\nimport * as React from \"react\";\nimport { styles } from \"./AuthenticatingContent.styles\";\n\nexport default class AuthenticatingContent extends React.Component {\n    public render(): React.ReactNode {\n        return (\n            <Row type=\"flex\" align=\"middle\">\n                <Spin style={styles.loadingSpinner} />\n            </Row>\n        );\n    }\n}\n","import * as React from \"react\";\n\nconst FooterContent: React.FunctionComponent = () => {\n    return <span>FOOTER!</span>;\n};\n\nexport default FooterContent;\n","import * as React from \"react\";\nimport { BindThis } from \"../../utilities/BindThis\";\n\ninterface IMediaQueryProps {\n    readonly mediaQuery: string;\n    readonly onChange: (doesMatch: boolean) => void;\n}\n\nexport default class MediaQuery extends React.Component<IMediaQueryProps> {\n    private readonly mediaQuery: MediaQueryList;\n\n    constructor(props: IMediaQueryProps) {\n        super(props);\n\n        this.mediaQuery = window.matchMedia(props.mediaQuery);\n    }\n\n    public render(): React.ReactNode {\n        return null;\n    }\n\n    public componentDidMount(): void {\n        this.mediaQuery.addEventListener(\"change\", this.handleChange);\n\n        // Initial trigger, because it will only trigger when the width is changed from now on.\n        this.props.onChange(this.mediaQuery.matches);\n    }\n\n    public componentWillUnmount(): void {\n        this.mediaQuery.removeEventListener(\"change\", this.handleChange);\n    }\n\n    @BindThis()\n    private handleChange(event: MediaQueryListEvent): void {\n        this.props.onChange(event.matches);\n    }\n}\n","export function hasProperty<T>(object: T, property: keyof T): boolean {\n    return property in object;\n}\n","import { Form, Input, InputNumber } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport React from \"react\";\n\nexport interface IFormFields {\n    togglApiToken: string;\n    roundProjectMinutes: number;\n}\n\ninterface ISettingsFormProps {\n    readonly initialValues: IFormFields;\n    readonly onFormFieldChanged: (changedFormItems: ChangedFormItems, areAllFieldsValid: boolean) => void;\n    readonly onSave: () => void;\n}\n\nexport type ChangedFormItems = Partial<IFormFields>;\n\ntype SettingsFormProps =\n    & FormComponentProps\n    & ISettingsFormProps;\n\nconst SettingsForm: React.FC<SettingsFormProps> = (props) => {\n    const { form, initialValues, onSave } = props;\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLFormElement>) => {\n        if (event.keyCode === 13) {\n            // Submit on enter\n            event.preventDefault();\n            onSave();\n        }\n    };\n\n    return (\n        <Form layout=\"horizontal\" onKeyDown={handleKeyDown}>\n            <Form.Item label=\"Toggl API token\">\n                {form.getFieldDecorator<IFormFields>(\"togglApiToken\", {\n                    initialValue: initialValues.togglApiToken,\n                })(\n                    <Input />,\n                )}\n            </Form.Item>\n            <Form.Item label=\"Round projects down to minutes\">\n                {form.getFieldDecorator<IFormFields>(\"roundProjectMinutes\", {\n                    initialValue: initialValues.roundProjectMinutes,\n                })(\n                    <InputNumber min={0} />,\n                )}\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default Form.create<SettingsFormProps>({\n    onValuesChange: async (props, _, allFormFields: IFormFields) => {\n        const { initialValues, onFormFieldChanged } = props;\n        const changedFormItems: ChangedFormItems = {};\n\n        // TODO: make this more generic?\n        if (allFormFields.togglApiToken !== initialValues.togglApiToken) {\n            changedFormItems.togglApiToken = allFormFields.togglApiToken;\n        }\n        if (allFormFields.roundProjectMinutes !== initialValues.roundProjectMinutes) {\n            changedFormItems.roundProjectMinutes = allFormFields.roundProjectMinutes;\n        }\n\n        const changedFields = Object.keys(changedFormItems);\n        // The actual fields get updated in the next tick, so delay validation until that moment.\n        window.setTimeout(() => {\n            const areAllFieldsValid = changedFields.reduce(\n                (areValid, changedField) => {\n                    if (!areValid) { return false; }\n                    const errors = props.form.getFieldError(changedField);\n                    return errors === undefined || errors.length === 0;\n                },\n                true);\n            onFormFieldChanged(changedFormItems, areAllFieldsValid);\n        });\n    },\n})(SettingsForm);\n","import { Button, Icon, message, Modal } from \"antd\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { useSettings } from \"../../context/SettingsContext\";\nimport { useUserState } from \"../../context/UserContext\";\nimport { hasProperty } from \"../../utilities/hasProperty\";\nimport SettingsForm, { ChangedFormItems, IFormFields } from \"./SettingsForm\";\nimport styles from \"./SettingsPopup.module.scss\";\n\nconst SettingsPopup: React.FC = () => {\n    const settings = useSettings();\n    const { login } = useUserState();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const [formFieldValues, setFormFieldValues] = useState<Partial<IFormFields>>({});\n    const [isFormValid, setIsFormValid] = useState<boolean>(true);\n\n    const initialFormFieldValues: IFormFields = {\n        togglApiToken: settings.togglApiToken,\n        roundProjectMinutes: settings.roundProjectDurationsDownToMinutes,\n    };\n\n    const openModal = () => setIsModalOpen(true);\n    const closeModal = () => setIsModalOpen(false);\n\n    const handleFormItemChanged = (changedFormItems: ChangedFormItems, areAllFieldsValid: boolean) => {\n        setFormFieldValues(changedFormItems);\n        setIsFormValid(areAllFieldsValid);\n    };\n\n    const handleSave = () => {\n        if (!isFormValid) { return; }\n        // TODO: make this generic for each field, and only do an explicit check for e.g. calling login()?\n        if (hasProperty(formFieldValues, \"togglApiToken\")) {\n            settings.dispatch({\n                type: \"SET_TOGGL_API_TOKEN\",\n                token: formFieldValues.togglApiToken!,\n            });\n            login();\n        }\n        if (hasProperty(formFieldValues, \"roundProjectMinutes\")) {\n            settings.dispatch({\n                type: \"SET_ROUND_PROJECT_DURATIONS_DOWN_TO_MINUTES\",\n                minutes: formFieldValues.roundProjectMinutes!,\n            });\n        }\n        message.success(\"Successfully updated settings\");\n        closeModal();\n    };\n    const handleCancel = () => {\n        closeModal();\n    };\n    const handleResetDefaults = () => {\n        settings.dispatch({ type: \"RESET\" });\n        login();\n        closeModal();\n    };\n\n    const renderFooter = () => {\n        return (\n            <>\n                <Button\n                    ghost={true}\n                    type=\"danger\"\n                    className={styles.restoreSettingsButton}\n                    onClick={handleResetDefaults}\n                >\n                    Reset defaults\n                </Button>\n                <Button onClick={handleCancel}>Cancel</Button>\n                <Button type=\"primary\" disabled={!isFormValid} onClick={handleSave}>Save</Button>\n            </>\n        );\n    };\n\n    return (\n        <>\n            <Icon type=\"setting\" theme=\"outlined\" className={styles.icon} onClick={openModal} />\n            <Modal\n                title=\"Settings\"\n                footer={renderFooter()}\n                visible={isModalOpen}\n                destroyOnClose={true}\n                maskClosable={false}\n                onCancel={handleCancel}\n            >\n                <SettingsForm\n                    initialValues={initialFormFieldValues}\n                    onFormFieldChanged={handleFormItemChanged}\n                    onSave={handleSave}\n                />\n            </Modal>\n        </>\n    );\n};\n\nexport default SettingsPopup;\n","import { createStyles, ellipsisText, verticalCenterStyles } from \"../../../utilities/styles\";\n\nconst navBarMargin = 25;\n\nexport const styles = createStyles({\n    avatarContainer: {\n        left: navBarMargin,\n        ...verticalCenterStyles,\n    },\n    navbarCenter: {\n        textAlign: \"center\",\n    },\n    navbarTitle: {\n        color: \"white\",\n        textTransform: \"uppercase\",\n        padding: \"0 10px\",\n        ...ellipsisText,\n    },\n    optionsContainer: {\n        marginTop: 5,\n        right: navBarMargin,\n        ...verticalCenterStyles,\n    },\n});\n","import { Avatar, Tooltip } from \"antd\";\nimport { TooltipPlacement } from \"antd/lib/tooltip\";\nimport * as React from \"react\";\nimport { User } from \"../../../models/User\";\nimport { BindThis } from \"../../../utilities/BindThis\";\nimport { MediaQuery } from \"../../MediaQuery\";\nimport { SettingsPopup } from \"../../SettingsMenu\";\nimport { styles } from \"./HeaderContent.styles\";\n\ninterface IHeaderContentProps {\n    user?: User;\n}\n\ninterface IHeaderContentState {\n    isSmallWidth: boolean;\n}\n\nclass HeaderContent extends React.Component<IHeaderContentProps, IHeaderContentState> {\n    constructor(props: IHeaderContentProps) {\n        super(props);\n\n        this.state = {\n            isSmallWidth: true,\n        };\n    }\n\n    public render(): React.ReactNode {\n        const { user } = this.props;\n\n        const userNameAndEmail = user === undefined ? \"\" : `${user.fullName} (${user.email})`;\n        const avatarSrc = user === undefined ? undefined : user.imageUrl;\n        const avatarTooltipPlacement: TooltipPlacement = this.state.isSmallWidth ? \"bottomRight\" : \"right\";\n\n        return (\n            <React.Fragment>\n                <MediaQuery mediaQuery=\"(max-width: 500px)\" onChange={this.handleWidthMediaQueryChanged} />\n                <div style={styles.avatarContainer}>\n                    <Tooltip title={userNameAndEmail} placement={avatarTooltipPlacement} autoAdjustOverflow={true}>\n                        <Avatar size=\"small\" src={avatarSrc} />\n                    </Tooltip>\n                </div>\n                <div style={styles.navbarCenter}>\n                    <h1 style={styles.navbarTitle}>Toggl Easy Reports</h1>\n                </div>\n                <div style={styles.optionsContainer}>\n                    <SettingsPopup />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    @BindThis()\n    private handleWidthMediaQueryChanged(doesMediaQueryMatch: boolean): void {\n        this.setState({\n            isSmallWidth: doesMediaQueryMatch,\n        });\n    }\n}\n\nexport default HeaderContent;\n","import { Alert, Icon } from \"antd\";\nimport * as React from \"react\";\n\nexport default class NotAuthenticatedContent extends React.Component {\n    public render(): React.ReactNode {\n        return (\n            <Alert\n                type=\"error\"\n                message=\"Could not login\"\n                description={this.renderDescription()}\n            />\n        );\n    }\n\n    private renderDescription(): React.ReactNode {\n        return (\n            <React.Fragment>\n                <p>\n                    <span>Please enter a valid Toggl API token in the settings.</span>\n                    &nbsp;\n                    <span>\n                        Click on <Icon type=\"setting\" theme=\"outlined\" /> top right.\n                    </span>\n                </p>\n                <p>\n                    <span>Get your API token</span>\n                    &nbsp;\n                    <a href=\"https://track.toggl.com/app/profile\" rel=\"noopener noreferrer\" target=\"_blank\">\n                        here\n                    </a>\n                    .\n                </p>\n            </React.Fragment>\n        );\n    }\n}\n","import { Layout, message } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport { useUserState } from \"../../context/UserContext\";\nimport styles from \"./App.module.scss\";\nimport { AuthenticatedContent } from \"./AuthenticatedContent\";\nimport { AuthenticatingContent } from \"./AuthenticatingContent\";\nimport { FooterContent } from \"./FooterContent\";\nimport { HeaderContent } from \"./HeaderContent\";\nimport { NotAuthenticatedContent } from \"./NotAuthenticatedContent\";\n\nconst App: React.FC = () => {\n    const { userState, login } = useUserState();\n\n    useEffect(() => {\n        login();\n    }, [login]);\n\n    useEffect(() => {\n        switch (userState.authState) {\n            case \"LOGGED_IN\":\n                message.success(`Successfully logged in, ${userState.user.fullName}!`);\n                break;\n            case \"LOGGED_OUT\":\n                message.success(\"Successfully logged out!\");\n                break;\n            case \"LOGGING_IN\":\n                message.loading(\"Logging in...\");\n                break;\n            case \"LOGIN_FAILED\":\n                message.error(\"Please enter a valid API key!\");\n                break;\n        }\n    }, [userState]);\n\n    let content: React.ReactNode;\n    switch (userState.authState) {\n        case \"LOGGED_IN\":\n            content = <AuthenticatedContent user={userState.user} />;\n            break;\n        case \"LOGIN_FAILED\":\n        case \"LOGGED_OUT\":\n            content = <NotAuthenticatedContent />;\n            break;\n        case \"LOGGING_IN\":\n            content = <AuthenticatingContent />;\n            break;\n    }\n\n    return (\n        <Layout className={styles.layout}>\n            <Layout.Header className={styles.header}>\n                <HeaderContent user={userState.user} />\n            </Layout.Header>\n            <Layout.Content className={styles.content}>{content}</Layout.Content>\n            <Layout.Footer className={styles.footer}>\n                <FooterContent />\n            </Layout.Footer>\n        </Layout>\n    );\n};\n\nexport default App;\n","import { message } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport { SettingsProvider } from \"./context/SettingsContext\";\nimport { UserProvider } from \"./context/UserContext\";\nimport \"./index.scss\";\nimport \"./polyfills\";\n\n// Ant design notification messages.\nmessage.config({\n    maxCount: 1,\n    top: 45,\n});\n\nReactDOM.render(\n    (\n        <SettingsProvider>\n            <UserProvider>\n                <App />\n            </UserProvider>\n        </SettingsProvider>\n    ),\n    document.getElementById(\"root\"),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"App_layout__1DIBs\",\"header\":\"App_header__3MgOT\",\"content\":\"App_content__11LHs\",\"innerContent\":\"App_innerContent__3mfR7\",\"footer\":\"App_footer__10-3F\"};"],"sourceRoot":""}